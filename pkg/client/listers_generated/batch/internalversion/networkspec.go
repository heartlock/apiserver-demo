/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	batch "github.com/heartlock/apiserver-demo/pkg/apis/batch"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkSpecLister helps list NetworkSpecs.
type NetworkSpecLister interface {
	// List lists all NetworkSpecs in the indexer.
	List(selector labels.Selector) (ret []*batch.NetworkSpec, err error)
	// NetworkSpecs returns an object that can list and get NetworkSpecs.
	NetworkSpecs(namespace string) NetworkSpecNamespaceLister
	NetworkSpecListerExpansion
}

// networkSpecLister implements the NetworkSpecLister interface.
type networkSpecLister struct {
	indexer cache.Indexer
}

// NewNetworkSpecLister returns a new NetworkSpecLister.
func NewNetworkSpecLister(indexer cache.Indexer) NetworkSpecLister {
	return &networkSpecLister{indexer: indexer}
}

// List lists all NetworkSpecs in the indexer.
func (s *networkSpecLister) List(selector labels.Selector) (ret []*batch.NetworkSpec, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*batch.NetworkSpec))
	})
	return ret, err
}

// NetworkSpecs returns an object that can list and get NetworkSpecs.
func (s *networkSpecLister) NetworkSpecs(namespace string) NetworkSpecNamespaceLister {
	return networkSpecNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkSpecNamespaceLister helps list and get NetworkSpecs.
type NetworkSpecNamespaceLister interface {
	// List lists all NetworkSpecs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*batch.NetworkSpec, err error)
	// Get retrieves the NetworkSpec from the indexer for a given namespace and name.
	Get(name string) (*batch.NetworkSpec, error)
	NetworkSpecNamespaceListerExpansion
}

// networkSpecNamespaceLister implements the NetworkSpecNamespaceLister
// interface.
type networkSpecNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkSpecs in the indexer for a given namespace.
func (s networkSpecNamespaceLister) List(selector labels.Selector) (ret []*batch.NetworkSpec, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*batch.NetworkSpec))
	})
	return ret, err
}

// Get retrieves the NetworkSpec from the indexer for a given namespace and name.
func (s networkSpecNamespaceLister) Get(name string) (*batch.NetworkSpec, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(batch.Resource("networkspec"), name)
	}
	return obj.(*batch.NetworkSpec), nil
}
