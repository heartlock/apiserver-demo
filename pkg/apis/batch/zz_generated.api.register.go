/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package batch

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
	"k8s.io/client-go/pkg/api"
)

var (
	InternalNetwork = builders.NewInternalResource(
		"networks",
		func() runtime.Object { return &Network{} },
		func() runtime.Object { return &NetworkList{} },
	)
	InternalNetworkStatus = builders.NewInternalResourceStatus(
		"networks",
		func() runtime.Object { return &Network{} },
		func() runtime.Object { return &NetworkList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("batch.heartlock.io").WithKinds(
		InternalNetwork,
		InternalNetworkStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient=true

type Network struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   NetworkSpec
	Status NetworkStatus
}

// +genclient=true

type NetworkSpec struct {
}

// +genclient=true

type NetworkStatus struct {
}

//
// Network Functions and Structs
//
type NetworkStrategy struct {
	builders.DefaultStorageStrategy
}

type NetworkStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

type NetworkList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Network
}

func (Network) NewStatus() interface{} {
	return NetworkStatus{}
}

func (pc *Network) GetStatus() interface{} {
	return pc.Status
}

func (pc *Network) SetStatus(s interface{}) {
	pc.Status = s.(NetworkStatus)
}

func (pc *Network) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Network) SetSpec(s interface{}) {
	pc.Spec = s.(NetworkSpec)
}

func (pc *Network) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Network) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Network) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Network.
type NetworkRegistry interface {
	ListNetworks(ctx request.Context, options *internalversion.ListOptions) (*NetworkList, error)
	GetNetwork(ctx request.Context, id string, options *metav1.GetOptions) (*Network, error)
	CreateNetwork(ctx request.Context, id *Network) (*Network, error)
	UpdateNetwork(ctx request.Context, id *Network) (*Network, error)
	DeleteNetwork(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewNetworkRegistry(sp builders.StandardStorageProvider) NetworkRegistry {
	return &storageNetwork{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
type storageNetwork struct {
	builders.StandardStorageProvider
}

func (s *storageNetwork) ListNetworks(ctx request.Context, options *internalversion.ListOptions) (*NetworkList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*NetworkList), err
}

func (s *storageNetwork) GetNetwork(ctx request.Context, id string, options *metav1.GetOptions) (*Network, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Network), nil
}

func (s *storageNetwork) CreateNetwork(ctx request.Context, object *Network) (*Network, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object)
	if err != nil {
		return nil, err
	}
	return obj.(*Network), nil
}

func (s *storageNetwork) UpdateNetwork(ctx request.Context, object *Network) (*Network, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object, api.Scheme))
	if err != nil {
		return nil, err
	}
	return obj.(*Network), nil
}

func (s *storageNetwork) DeleteNetwork(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
